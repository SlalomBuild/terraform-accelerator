#!/bin/bash

# This script is automatically generated by `atmos terraform account-map`.
# Do not modify this script directly. Instead, modify the template file.
# Path: components/terraform/account-map/account-info.tftmpl

# CAUTION: this script is appended to other scripts,
# so it must not destroy variables like `functions`.
# On the other hand, this script is repeated for each
# organization, so it must destroy/override variables
# like `accounts` and `account_roles`.

functions+=(namespace)
function namespace() {
  echo accelerator
}

functions+=("source-profile")
function source-profile() {
  echo accelerator-identity
}

declare -A accounts

# root account included
accounts=(
  ["audit"]="012345678910"
  ["automation"]="012345678910"
  ["development"]="012345678910"
  ["dns"]="012345678910"
  ["identity"]="012345678910"
  ["ipam"]="012345678910"
  ["log-archive"]="012345678910"
  ["nonprod"]="012345678910"
  ["prod"]="012345678910"
  ["root"]="012345678910"
  ["sec-tooling"]="012345678910"
  ["shared"]="012345678910"
  ["transit"]="012345678910"
)

declare -A account_profiles

# root account included
account_profiles=(
  ["audit"]="accelerator-global-audit"
  ["automation"]="accelerator-global-automation"
  ["development"]="accelerator-global-development"
  ["dns"]="accelerator-global-dns"
  ["identity"]="accelerator-global-identity"
  ["ipam"]="accelerator-global-ipam"
  ["log-archive"]="accelerator-global-log-archive"
  ["nonprod"]="accelerator-global-nonprod"
  ["prod"]="accelerator-global-prod"
  ["root"]="accelerator-global-root"
  ["sec-tooling"]="accelerator-global-sec-tooling"
  ["shared"]="accelerator-global-shared"
  ["transit"]="accelerator-global-transit"
)

declare -A account_roles

account_roles=(
  ["artifacts"]="artifacts"
  ["audit"]="audit"
  ["dns"]="dns"
  ["identity"]="identity"
  ["root"]="root"
)

functions+=("account-names")
function _account-names() {
  printf "%s\n" "${!accounts[@]}" | sort
}
function account-names() {
  printf "${CONFIG_NAMESPACE:+${CONFIG_NAMESPACE}-}%s\n" $(_account-names)
}

functions+=("account-ids")
function account-ids() {
  for name in $(_account-names); do
    printf "${CONFIG_NAMESPACE:+${CONFIG_NAMESPACE}-}%s = %s\n" "$name" "${accounts[$name]}"
  done
}

functions+=("account-roles")
function _account-roles() {
  printf "%s\n" "${!account_roles[@]}" | sort
}
function account-roles() {
  for role in $(_account-roles); do
    printf "${CONFIG_NAMESPACE:+${CONFIG_NAMESPACE}: }%s -> ${CONFIG_NAMESPACE:+${CONFIG_NAMESPACE}-}%s\n" $role "${account_roles[$role]}"
  done
}

########### non-template helpers ###########

functions+=("account-profile")
function account-profile() {
  printf "%s\n" "${account_profiles[$1]}"
}

functions+=("account-id")
function account-id() {
  local id="${accounts[$1]}"
  if [[ -n $id ]]; then
    echo "${CONFIG_NAMESPACE:+${CONFIG_NAMESPACE}: }$id"
  else
    echo "Account $1 not found" >&2
    exit 1
  fi
}

functions+=("account-for-role")
function account-for-role() {
  local account="${account_roles[$1]}"
  if [[ -n $account ]]; then
    echo "${CONFIG_NAMESPACE:+${CONFIG_NAMESPACE}: }$account"
  else
    echo "Account $1 not found" >&2
    exit 1
  fi
}

function account_info_main() {
  if printf '%s\0' "${functions[@]}" | grep -Fxqz -- "$1"; then
    "$@"
  else
    fns=$(printf '%s\n' "${functions[@]}" | sort | uniq)
    usage=${fns//$'\n'/ | }
    echo "Usage: $0 [ $usage ]"
    exit 99
  fi
}

if ! command -v main >/dev/null; then
  function main() {
    account_info_main "$@"
  }
fi

# If this script is being sourced, do not execute main
(return 0 2>/dev/null) && sourced=1 || main "$@"
