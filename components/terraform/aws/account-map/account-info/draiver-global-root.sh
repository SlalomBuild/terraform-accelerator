#!/bin/bash

# This script is automatically generated by `atmos terraform account-map`.
# Do not modify this script directly. Instead, modify the template file.
# Path: components/terraform/account-map/account-info.tftmpl

# CAUTION: this script is appended to other scripts,
# so it must not destroy variables like `functions`.
# On the other hand, this script is repeated for each
# organization, so it must destroy/override variables
# like `accounts` and `account_roles`.


functions+=(namespace)
function namespace() {
  echo draiver
}

functions+=("source-profile")
function source-profile() {
  echo draiver-identity
}


declare -A accounts

# root account included
accounts=(
    ["audit"]="206033381289"
    ["automation"]="598987556933"
    ["development"]="999085683799"
    ["dns"]="014102593407"
    ["identity"]="461874932894"
    ["ipam"]="838147303013"
    ["log-archive"]="576911256458"
    ["nonprod"]="532904089877"
    ["prod"]="755834691864"
    ["root"]="531267869156"
    ["sec-tooling"]="401031529788"
    ["shared"]="958201063996"
    ["transit"]="523262733422"
  )

declare -A account_profiles

# root account included
account_profiles=(
    ["audit"]="draiver-global-audit"
    ["automation"]="draiver-global-automation"
    ["development"]="draiver-global-development"
    ["dns"]="draiver-global-dns"
    ["identity"]="draiver-global-identity"
    ["ipam"]="draiver-global-ipam"
    ["log-archive"]="draiver-global-log-archive"
    ["nonprod"]="draiver-global-nonprod"
    ["prod"]="draiver-global-prod"
    ["root"]="draiver-global-root"
    ["sec-tooling"]="draiver-global-sec-tooling"
    ["shared"]="draiver-global-shared"
    ["transit"]="draiver-global-transit"
  )

declare -A account_roles

account_roles=(
    ["artifacts"]="artifacts"
    ["audit"]="audit"
    ["dns"]="dns"
    ["identity"]="identity"
    ["root"]="root"
  )

functions+=("account-names")
function _account-names() {
  printf "%s\n" "${!accounts[@]}" | sort
}
function account-names() {
  printf "${CONFIG_NAMESPACE:+${CONFIG_NAMESPACE}-}%s\n" $(_account-names)
}

functions+=("account-ids")
function account-ids() {
  for name in $(_account-names); do
    printf "${CONFIG_NAMESPACE:+${CONFIG_NAMESPACE}-}%s = %s\n" "$name" "${accounts[$name]}"
  done
}

functions+=("account-roles")
function _account-roles() {
  printf "%s\n" "${!account_roles[@]}" | sort
}
function account-roles() {
	for role in $(_account-roles); do
  	printf "${CONFIG_NAMESPACE:+${CONFIG_NAMESPACE}: }%s -> ${CONFIG_NAMESPACE:+${CONFIG_NAMESPACE}-}%s\n" $role "${account_roles[$role]}"
	done
}

########### non-template helpers ###########

functions+=("account-profile")
function account-profile() {
  printf "%s\n" "${account_profiles[$1]}"
}

functions+=("account-id")
function account-id() {
	local id="${accounts[$1]}"
	if [[ -n $id ]]; then
		echo "${CONFIG_NAMESPACE:+${CONFIG_NAMESPACE}: }$id"
	else
		echo "Account $1 not found" >&2
		exit 1
	fi
}

functions+=("account-for-role")
function account-for-role() {
	local account="${account_roles[$1]}"
	if [[ -n $account ]]; then
		echo "${CONFIG_NAMESPACE:+${CONFIG_NAMESPACE}: }$account"
	else
		echo "Account $1 not found" >&2
		exit 1
	fi
}

function account_info_main() {
  if printf '%s\0' "${functions[@]}" | grep -Fxqz -- "$1"; then
	  "$@"
  else
    fns=$(printf '%s\n' "${functions[@]}" | sort | uniq)
    usage=${fns//$'\n'/ | }
    echo "Usage: $0 [ $usage ]"
    exit 99
  fi
}

if ! command -v main >/dev/null; then
  function main() {
    account_info_main "$@"
  }
fi

# If this script is being sourced, do not execute main
(return 0 2>/dev/null) && sourced=1 || main "$@"
